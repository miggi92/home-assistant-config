---
#
state_engine:
  template:
    - en-en
  variables:
    round: -1
    multiplier: 1
    show_last_changed: false
    force_date: false
    show_unit: false
    has_time: >-
      [[[ return states[entity.entity_id].attributes.has_time != null &&
      states[entity.entity_id].attributes.has_time; ]]]
    has_date: >-
      [[[ return states[entity.entity_id].attributes.has_date != null &&
      states[entity.entity_id].attributes.has_date; ]]]
  custom_fields:
    cs: |
      [[[
        let state = states[entity.entity_id].state;

        if(!isNaN(state)) {
          state = state * variables.multiplier;

          let unit = variables.show_unit ? states[entity.entity_id].attributes.unit_of_measurement : '';

          if(variables.round >= 0) {
            let exp = Math.pow(10,variables.round);
            state = Math.round(state * exp) / exp;
          }

          return state + ' ' + unit;
        }

        if ((variables.has_time || variables.has_date) || variables.show_last_changed || variables.show_last_triggered || variables.force_date) {

          let has_date = variables.has_date;
          let has_time = variables.has_time;

          let d = '';

          if (variables.show_last_changed) {
            d = new Date(states[entity.entity_id].last_changed);
          } else if (variables.show_last_triggered) {
            d = new Date(states[entity.entity_id].attributes.last_triggered);
          } else {
            d = new Date(state);
          }

          d = variables.force_date ? new Date(d) : d;

          if (!has_date && has_time) {
            return d.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) + 'Uhr';
          } else if (!has_time && has_date) {
            return d.toLocaleString(variables.date_format,{day:'numeric', month:'short', year:'numeric'});
          } else {
            let d_date = d.toLocaleString(variables.date_format,{day:'numeric', month:'short', year:'numeric'});
            let today = (new Date()).toLocaleString(variables.date_format,{day:'numeric', month:'short', year:'numeric'});

            if(d_date == today) {
              let time = d.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
              return time + variables.time_unit;
            }

            return d_date;
          }
        }

        var lang = {
          "on": variables.lang_on,
          "off": variables.lang_off,
          "not_home": variables.lang_not_home,
          "home": variables.lang_home,
          "paused": variables.lang_paused,
          "playing": variables.lang_playing,
          "stopped": variables.lang_stopped,
          "heat": variables.lang_heat,
          "night": variables.lang_armed_night,
          "armed_custom_bypass": variables.lang_armed_custom_bypass,
          "arming": variables.lang_arming,
          "armed_away": variables.lang_armed_away,
          "disarmed": variables.lang_disarmed
        };

        let trans_state = lang[state];

        return trans_state != null ? trans_state : state;
      ]]]
    es: |
      [[[
        if ((variables.has_time || variables.has_date) || variables.show_last_changed || variables.show_last_triggered || variables.force_date) {
          let state = states[entity.entity_id].state;

          let has_time = variables.has_time;
          let has_date = variables.has_date;

          let d = '';

          if (variables.show_last_changed) {
            d = new Date(states[entity.entity_id].last_changed);
          } else if (variables.show_last_triggered) {
            d = new Date(states[entity.entity_id].attributes.last_triggered);
          } else {
            d = new Date(state);
          }

          d = variables.force_date ? new Date(d) : d;

          let d_date = d.toLocaleString('de-de',{day:'numeric', month:'short', year:'numeric'});
          let today = (new Date()).toLocaleString('de-de',{day:'numeric', month:'short', year:'numeric'});

          if(d_date != today) {
            let time = d.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
            return time + variables.time_unit;
          }
        }
      ]]]
