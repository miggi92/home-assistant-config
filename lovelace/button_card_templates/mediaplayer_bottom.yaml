---
#
custom_card_mediaplayer_bottom:
  template: setup
  show_label: true
  name: |
    [[[
      if (states[ entity.entity_id ].attributes.active_child == "media_player.playstation_5") {
        return states["sensor.ps5_343_activity"].attributes.players
      } else if (states[ entity.entity_id ].attributes.active_child == "media_player.steam_jlnbln") {
        return 'jlnbln'
      } else if (states[ entity.entity_id ].attributes.active_child == "media_player.plex_bedroom") {
        return states[ entity.entity_id ].attributes.media_series_title
      } else {
        if (states[ entity.entity_id ].attributes.media_artist != null ) {
          return states[ entity.entity_id ].attributes.media_artist
        } else {
          return "Streaming"
        }
      }
    ]]]
  label: "[[[ return states[ entity.entity_id ].attributes.media_title ]]]"
  show_state: false
  show_entity_picture: true
  entity_picture: |
    [[[
      if (states[ entity.entity_id ].attributes.active_child == "media_player.playstation_5") {
        return states["sensor.ps5_343_activity"].attributes.title_image
      } else if (states[ entity.entity_id ].attributes.active_child == "media_player.apple_tv_4k_2") {
        if (states[ entity.entity_id ].attributes.media_artist == "Rocket League Esports") {
          return '/local/images/rlesports.jpg';
        } else {
          return states["media_player.apple_tv_4k_2"].attributes.entity_picture
        }
      } else if (states[ entity.entity_id ].attributes.active_child == "media_player.steam_jlnbln") {
        return states["sensor.steam_76561197981585794"].attributes.game_image_main
      } else if (states[ entity.entity_id ].attributes.active_child == "media_player.plex_bedroom") {
        return states["media_player.plex_bedroom"].attributes.entity_picture
      } else if (states[ entity.entity_id ].attributes.active_child == "media_player.music") {
        if (states["media_player.music"].attributes.active_child == "media_player.bedroom_nest_music_assistant") {
          return states["media_player.alarm_clock_2"].attributes.entity_picture
        } else {
          return states[ entity.entity_id ].attributes.entity_picture
        }
      } else if (states[ entity.entity_id ].attributes.active_child == "media_player.audiobook") {
        if (states['input_select.audiobook'].state == "Harry Potter") {
          if (states['input_number.hp_book'].state == 1.0) {
            return '/local/images/HP_1.jpg';
          } else if (states['input_number.hp_book'].state == 2.0) {
            return '/local/images/HP_2.jpg';
          } else if (states['input_number.hp_book'].state == 3.0) {
            return '/local/images/HP_3.jpg';
          } else if (states['input_number.hp_book'].state == 4.0) {
            return '/local/images/HP_4.jpg';
          } else if (states['input_number.hp_book'].state == 5.0) {
            return '/local/images/HP_5.jpg';
          } else if (states['input_number.hp_book'].state == 6.0) {
            return '/local/images/HP_6.jpg';
          } else if (states['input_number.hp_book'].state == 7.0) {
            return '/local/images/HP_7.jpg';
          }
        }
      } else {
        return states[ entity.entity_id ].attributes.entity_picture
      }
    ]]]
  icon: |
    [[[
      if (states[ entity.entity_id ].attributes.active_child == "media_player.playstation_5") {
        return 'mdi:sony-playstation'
      } else if (states[ entity.entity_id ].attributes.app_name == "YouTube") {
        return 'mdi:youtube-tv'
      } else if (states[ entity.entity_id ].attributes.app_name == "Netflix") {
        return 'mdi:netflix'
      } else if (states[ entity.entity_id ].attributes.app_name == "Plex") {
        return 'mdi:plex'
      } else {
        return 'mdi:television-guide'
      }
    ]]]
  styles:
    grid:
      - grid-template-areas: |
          "i play_state button"
          "i l button"
          "i n button"
          "bar bar bar"
      - grid-template-columns: min-content
      - grid-template-rows: min-content min-content min-content
      - column-gap: 15px
    icon:
      - width: 60px
      - height: 60px
      - color: var(--red)
    card:
      - padding: 15px 15px 15px 15px
      - height: 180px
      - width: 100vw
      - overflow: hidden
      - position: |
          [[[
            if (states["input_boolean.debug_rounded"].state == "on") {
              return 'static'
            } else {
              return 'fixed'
            }
          ]]]
      - margin: 0
      - bottom: 0
      - left: 0
      - z-index: 2
      - border-radius: 20px 20px 0px 0px
      - box-shadow: >-
          rgba(14, 30, 37, 0.12) 0px 2px 4px 0px, rgba(14, 30, 37, 0.32) 0px
          2px 16px 0px;
    img_cell:
      - background: none
      - border-radius: 10px
      - width: 60px
      - height: 60px
      - justify-self: start
      - align-self: start
      - left: 20px
    entity_picture:
      - object-fit: cover
    state:
      - font-size: 10px
      - justify-self: start
      - align-self: start
      - color: var(--contrast10)
      - padding-left: 25px
    name:
      - font-size: 11px
      - justify-self: start
      - align-self: start
      - padding-left: 20px
      - animation: my-animation 15s linear infinite
    label:
      - justify-self: start
      - align-self: end
      - font-weight: 700
      - padding-left: 20px
      - font-size: 13px
      - margin-top: "-5px"
    custom_fields:
      button:
        - justify-self: end
        - align-self: center
        - padding-right: 20px
        - padding-top: 7px
      play_state:
        - font-size: 10px
        - justify-self: start
        - align-self: start
        - color: var(--contrast14)
        - padding-left: 21px
        - padding-top: 10px
      progress:
        - background-color: var(--contrast10)
        - position: absolute
        - top: unset
        - bottom: 90px
        - left: 40px
        - height: 2px
        - width: 80%
      bar:
        - background-color: var(--green)
        - position: absolute
        - bottom: 90px
        - left: 40px
        - top: unset
        - height: 2px
        - z-index: 1
        - transition: 1s ease-out
  custom_fields:
    button:
      card:
        type: custom:button-card
        icon: mdi:play
        entity: "[[[ return entity.entity_id ]]]"
        show_name: false
        tap_action:
          action: call-service
          service: media_player.media_play_pause
          target:
            entity_id: "[[[ return entity.entity_id ]]]"
        styles:
          card:
            - overflow: visible
            - background: var(--contrast6)
            - border-radius: 10px
          icon:
            - width: 17px
            - color: var(--contrast16)
          img_cell:
            - padding: 10px
            - width: 20px
        state:
          - value: playing
            icon: |
              [[[
                if (states[entity.entity_id].attributes.active_child == "media_player.playstation_5") {
                  return 'mdi:sony-playstation'
                } else if (states[entity.entity_id].attributes.active_child == "media_player.steam_jlnbln") {
                  return 'mdi:steam'
                } else {
                  return 'mdi:pause'
                }
              ]]]
    play_state: |
      [[[
        if (states[entity.entity_id].attributes.active_child == "media_player.spotify_junglemoney") {
          return states[entity.entity_id].state + " - " + states[entity.entity_id].attributes.source
        } else if (states[entity.entity_id].attributes.active_child == "media_player.playstation_5") {
          return states[entity.entity_id].state + " - Playstation 5"
        } else if (states[entity.entity_id].attributes.active_child == "media_player.audiobook") {
          return states[entity.entity_id].state + " - Alarm Clock"
        } else if (states[entity.entity_id].attributes.active_child == "media_player.plex_bedroom") {
          return states[entity.entity_id].state + " - Bedroom TV"
        } else if (states[entity.entity_id].attributes.active_child == "media_player.steam_jlnbln") {
          return states[entity.entity_id].state + " - Steam"
        } else if (states[entity.entity_id].attributes.active_child == "media_player.apple_tv_4k_2") {
          return states[entity.entity_id].state + " - " + states[entity.entity_id].attributes.app_name
        } else {
          return states[entity.entity_id].state + " - " + states["sensor.music_room"].state
        }
      ]]]
    bar: |
      [[[
        if (entity.attributes.media_position !== undefined) {
        setTimeout(() => {
          let elt = this.shadowRoot,
              card = elt.getElementById('card'),
              container = elt.getElementById('container'),
              bar = elt.getElementById('bar');
          if (elt && card && container && bar) {
              card.insertBefore(bar, container);
                function update() {
                  let mediaPositionUpdatedAt = entity.attributes.media_position_updated_at,
                      mediaPosition = entity.attributes.media_position,
                      mediaDuration = entity.attributes.media_duration,
                      mediaContentType = entity.attributes.media_content_type;
                  let percentage = entity.state === 'paused'
                    ? (mediaPosition / mediaDuration * 80)
                    : entity.state === 'playing'
                      ? (((Date.now() / 1000) - (new Date(mediaPositionUpdatedAt).getTime() / 1000) + mediaPosition) / mediaDuration * 80)
                      : 0;
                  bar.style.width = percentage.toFixed(1) + '%';
                  requestAnimationFrame(update);
                }
                requestAnimationFrame(update);
          }
        }, 0);
        return ' ';}
      ]]]
    progress: |
      [[[
        if (entity.attributes.media_position !== undefined) {
        return ' ';}
      ]]]
