---
#####
# Notifications engine - adapted from CCOSTAN
# Original Repo : https://github.com/CCOSTAN/Home-AssistantConfig
#####
notify_engine:
  fields:
    title:
      selector:
        text: null
      name: Title
      description: Titel der Benachrichtigung
      required: true
    value1:
      selector:
        text:
          multiline: true
      name: Message part 1
      description: Benachrichtigungsinhalt Teil 1
      required: true
    value2:
      selector:
        text:
          multiline: true
      name: Message part 2
      description: Benachrichtigungsinhalt Teil 2
    value3:
      selector:
        text:
          multiline: true
      name: Message part 3
      description: Benachrichtigungsinhalt Teil 3
    who:
      selector:
        text:
          multiline: true
      default: home
      name: Who
      description: An wen soll die Benachrichtigung gehen? (Kommagetrennt für mehrere Empfänger)
    photo:
      selector:
        text: null
      name: Foto
      description: Foto URL
    group:
      selector:
        text: null
      name: Gruppe
      description: Gruppe
    tag_id:
      selector:
        select:
          options:
            - information
            - alert
      default: information
      name: Tag
      description: Tag ID
    photos:
      selector:
        object: null
      name: Fotos
      description: Fotos
    inline_keyboard:
      selector:
        object: null
      name: Inline keyboard
      description: Möglichkeit auf Nachrichten direkt zu antworten
    actions:
      selector:
        object: null
      name: Actions
      description: Actions
    icon:
      selector:
        text: null
      name: Icon
      description: Icon

  mode: parallel
  sequence:
    - condition: state
      entity_id: input_boolean.text_notifications
      state: "on"
    - variables:
        notifiers:
          home: notify.telegram_home_group
          sig_home: notify.signalhome
          miguel: notify.mobile_app_pixel_9_pro
          silke: notify.mobile_app_pixel_9_pro
          work: notify.html5_work_laptop_hp
          tv: notify.gtv
          tv_overlay: notify.tvoverlaynotify
          family: notify.signalfamily
        recipient_list: "{{ (who | default('miguel')).split(',') | map('trim') | list }}"
        message: "{{ value1 }} {{ value2 }} {{ value3 }}"
    - variables:
        duplications:
          - who: tv
            condition: "{{ who != 'tv' }}"
            device: device_tracker.gtv
            media_check: media_player.gtv
          - who: work
            condition: "{{ who != 'work' }}"
            device: device_tracker.bcwmc5cg4100cy0
          - who: tv_overlay
            condition: "{{ who != 'tv_overlay' }}"
            device: device_tracker.1und1_box
            media_check: media_player.fernseher_im_wohnzimmer
    - repeat:
        for_each: "{{ recipient_list }}"
        sequence:
          - variables:
              notifier: "{{ notifiers.get(repeat.item, 'notify.miguel_telegram') }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ 'telegram' in notifier }}"
                sequence:
                  - action: "{{ notifier }}"
                    alias: "Send notification via telegram"
                    data:
                      title: "*{{ title }}*"
                      message: "{{ message }}"
                      data: >
                        {% set data = {} %}
                        {% if photo %}
                          {% set data = dict(data, **{'photo': [{'url': photo, 'caption': value1  ~ ' ' ~ value2  ~ ' ' ~ value3 | default}]}) %}
                        {% elif photos %}
                          {% set data = dict(data, **{'photo': photos}) %}
                        {% endif %}
                        {% if tag_id %}
                          {% set data = dict(data, **{'message_tag': tag_id}) %}
                        {% endif %}
                        {{ data }}
              - conditions:
                  - condition: template
                    value_template: "{{ who == 'tv' }}"
                sequence:
                  - action: "{{ notifier }}"
                    alias: "Send Notification to TV"
                    data:
                      title: "{{ title  }}"
                      message: "{{ message }}"
                      data:
                        image:
                          url: "{{ photo  }}"
              - conditions:
                  - condition: template
                    value_template: "{{ 'signal' in notifier }}"
                sequence:
                  - action: "{{ notifier }}"
                    alias: "Signal notification "
                    data:
                      message: >-
                        **{{ title }}**

                        {{ message }}
                      data: >
                        {% set data = {} %}
                        {% set data = dict(data, **{'text_mode': 'styled'}) %}
                        {% if photo %}
                          {% set data = dict(data, **{'attachments': [photo]}) %}
                        {% elif photos %}
                          {% set data = dict(data, **{'attachments': photos}) %}
                        {% endif %}
                        {{ data }}
              - conditions:
                  - condition: template
                    value_template: "{{ who == 'tv_overlay' }}"
                sequence:
                  - action: notify.tvoverlaynotify
                    data:
                      title: "{{ title }}"
                      message: "{{ message }}"
                      data:
                        appTitle: "{{ group }}"
                        seconds: 15
                        image: "{{ photo }}"
            default:
              - variables:
                  notification_payload: >
                    {% set d = namespace(data={}) %}
                    {% if group is defined and group %}
                      {% set d.data = dict(d.data, group=group) %}
                    {% endif %}
                    {% if tag_id is defined and tag_id %}
                      {% set d.data = dict(d.data, tag=tag_id) %}
                    {% endif %}
                    {% if icon is defined and icon %}
                      {% set d.data = dict(d.data, notification_icon=icon) %}
                    {% endif %}
                    {% if photo is defined and photo %}
                      {% set d.data = dict(d.data, image=photo) %}
                    {% endif %}
                    {% if actions is defined and actions %}
                      {% set d.data = dict(d.data, actions=actions) %}
                    {% endif %}
                    {{ d.data }}

              - action: "{{ notifier }}"
                alias: "Default notification"
                data:
                  title: "{{ title }}"
                  message: "{{ message }}"
                  data: "{{ notification_payload }}"
    - repeat:
        for_each: "{{ duplications }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ who != 'tv' and who != 'tv_overlay' and who != 'work'}}"
              - condition: template
                value_template: "{{ repeat.item.condition }}"
              - condition: template
                value_template: "{{ states(repeat.item.device) == 'home' }}"
              - condition: or
                conditions:
                  - condition: template
                    value_template: "{{ repeat.item.media_check != '' }}"
                  - condition: not
                    conditions:
                      - condition: template
                        value_template: "{{ states(repeat.item.media_check) == 'off' }}"
            then:
              - action: script.notify_engine
                data:
                  title: "{{ title }}"
                  value1: "{{ value1 }}"
                  value2: "{{ value2 }}"
                  value3: "{{ value3 }}"
                  who: "{{ repeat.item.who }}"
                  group: "{{ group }}"
                  photo: "{{ photo }}"
                  tag_id: "{{ tag_id }}"
