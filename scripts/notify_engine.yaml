---
#####
# Notifications engine - adapted from CCOSTAN
# Original Repo : https://github.com/CCOSTAN/Home-AssistantConfig
#
# Service template is used to select who will receive message.
# It can be used for individual messages but groups too
# for example - Discord sends message to both Discord and me etc.
#
# When you call script from automation, you can specify variables provided below to tweak ho notification will behave.
#
# List of variables you can used when calling this script:
#
# who:            List of available platforms and variable that is used to select where to push notification
# title:          Title of the message - not all notification platforms support this
# value1:         value variables are used as messge body. Up to 3 lines can be used
# value2:
# value3:
# target_id:      Some platforms require you to specify target ID of the channel for message in ex. Discord, Telegram etc
#
# Additional variables that can be used to further customize Companion App notifications
# tag_id:         Used to tag notifications, useful for mobile app notifications
# group:          Used to group notificatrions, useful for mobile app notifications
#####
notify_engine:
  fields:
    title:
      selector:
        text: null
      name: Title
      description: Titel der Benachrichtigung
      required: true
    value1:
      selector:
        text:
          multiline: true
      name: Message part 1
      description: Benachrichtigungsinhalt Teil 1
      required: true
    value2:
      selector:
        text:
          multiline: true
      name: Message part 2
      description: Benachrichtigungsinhalt Teil 2
    value3:
      selector:
        text:
          multiline: true
      name: Message part 3
      description: Benachrichtigungsinhalt Teil 3
    who:
      selector:
        text:
          multiline: true
      default: home
      name: Who
      description: An wen soll die Benachrichtigung gehen? (Kommagetrennt für mehrere Empfänger)
    photo:
      selector:
        text: null
      name: Foto
      description: Foto URL
    group:
      selector:
        text: null
      name: Gruppe
      description: Gruppe
    tag_id:
      selector:
        select:
          options:
            - information
            - alert
      default: information
      name: Tag
      description: Tag ID
    photos:
      selector:
        object: null
      name: Fotos
      description: Fotos
    inline_keyboard:
      selector:
        object: null
      name: Inline keyboard
      description: Möglichkeit auf Nachrichten direkt zu antworten
  mode: parallel
  sequence:
    - condition: state
      entity_id: input_boolean.text_notifications
      state: "on"
    - variables:
        notifiers:
          home: notify.telegram_home_group
          sig_home: notify.signalhome
          miguel: notify.miguel_telegram
          silke: notify.silke_telegram
          work: notify.html5_work_laptop_hp
          tv: notify.gtv
          family: notify.signalfamily
        recipient_list: "{{ who.split(',') | map('trim') | list }}"
        message: "{{ value1 }} {{ value2 }} {{ value3 }}"
    - repeat:
        for_each: "{{ recipient_list }}"
        sequence:
          - variables:
              notifier: "{{ notifiers.get(repeat.item, 'notify.miguel_telegram') }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ 'telegram' in notifier }}"
                sequence:
                  - action: "{{ notifier }}"
                    alias: "Send notification via telegram"
                    data:
                      title: "*{{ title }}*"
                      message: "{{ message }}"
                      data: >
                        {% set data = {} %}
                        {% if photo %}
                          {% set data = dict(data, **{'photo': [{'url': photo, 'caption': value1  ~ ' ' ~ value2  ~ ' ' ~ value3 | default}]}) %}
                        {% elif photos %}
                          {% set data = dict(data, **{'photo': photos}) %}
                        {% endif %}
                        {% if tag_id %}
                          {% set data = dict(data, **{'message_tag': tag_id}) %}
                        {% endif %}
                        {{ data }}
              - conditions:
                  - condition: template
                    value_template: "{{ who == 'tv' }}"
                sequence:
                  - action: "{{ notifier }}"
                    alias: "Send Notification to TV"
                    data:
                      title: "{{ title  }}"
                      message: "{{ message }}"
                      data:
                        image:
                          url: "{{ photo  }}"
              - conditions:
                  - condition: template
                    value_template: "{{ 'signal' in notifier }}"
                sequence:
                  - action: "{{ notifier }}"
                    alias: "Signal notification "
                    data:
                      message: >-
                        **{{ title }}**

                        {{ message }}
                      data: >
                        {% set data = {} %}
                        {% set data = dict(data, **{'text_mode': 'styled'}) %}
                        {% if photo %}
                          {% set data = dict(data, **{'attachments': [photo]}) %}
                        {% elif photos %}
                          {% set data = dict(data, **{'attachments': photos}) %}
                        {% endif %}
                        {{ data }}
            default:
              - action: "{{ notifier }}"
                alias: "Default notification"
                data:
                  title: "{{ title }}"
                  message: "{{ message }}"
                  data:
                    group: "{{ group }}"
                    tag: "{{ tag_id }}"
                    image: "{{ photo }}"
          - parallel:
              - if:
                  - condition: template
                    value_template: "{{ who != 'tv' }}"
                  - condition: state
                    entity_id: device_tracker.gtv
                    state: "home"
                  - condition: not
                    conditions:
                      - condition: state
                        entity_id: media_player.gtv
                        state: "off"
                then:
                  - action: script.notify_engine
                    data:
                      title: "{{ title }}"
                      value1: "{{ value1 }}"
                      value2: "{{ value2 }}"
                      value3: "{{ value3 }}"
                      who: "tv"
                      group: "{{ group }}"
                      photo: "{{ photo }}"
                      tag_id: "{{ tag_id }}"
              - if:
                  - condition: template
                    value_template: "{{ who != 'work' }}"
                  - condition: state
                    entity_id: device_tracker.bcwmc5cg4100cy0
                    state: "home"
                then:
                  - action: script.notify_engine
                    data:
                      title: "{{ title }}"
                      value1: "{{ value1 }}"
                      value2: "{{ value2 }}"
                      value3: "{{ value3 }}"
                      who: "work"
                      group: "{{ group }}"
                      photo: "{{ photo }}"
                      tag_id: "{{ tag_id }}"
              - if:
                  - condition: template
                    value_template: "{{ who != 'work' }}"
                  - condition: template
                    value_template: "{{ who != 'tv' }}"
                then:
                  - action: notify.tvoverlaynotify
                    data:
                      title: "{{ title }}"
                      message: "{{ message }}"
                      data:
                        appTitle: "{{ group }}"
                        seconds: 10
                        image: "{{ photo }}"

            alias: "Duplizieren der Nachrichten wenn andere Screens gerade verwendet werden"
